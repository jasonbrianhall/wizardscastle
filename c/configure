#!/bin/bash

# Fully Corrected Configure script for Wizard's Castle

# Function to check if a command exists and works
command_exists_and_works() {
    if command -v "$1" >/dev/null 2>&1; then
        if [ "$1" = "docker" ]; then
            # Check if Docker daemon is running
            if docker info >/dev/null 2>&1; then
                return 0
            else
                return 1
            fi
        else
            return 0
        fi
    else
        return 1
    fi
}

# Function to detect the Linux distribution
detect_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO=$ID
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        DISTRO=$DISTRIB_ID
    else
        DISTRO=$(uname -s)
    fi
    echo $DISTRO | tr '[:upper:]' '[:lower:]'
}

# Detect the distribution
DISTRO=$(detect_distro)

# Check for necessary commands
echo "Checking for necessary commands..."

# Check for GCC
if command_exists_and_works gcc; then
    echo "GCC found and working"
    GCC_AVAILABLE=true
else
    echo "GCC not found or not working"
    case $DISTRO in
        ubuntu|debian)
            echo "To install GCC, run: sudo apt-get install build-essential"
            ;;
        fedora|rhel|centos)
            echo "To install GCC, run: sudo dnf install gcc"
            ;;
        *)
            echo "Please install GCC using your distribution's package manager"
            ;;
    esac
    GCC_AVAILABLE=false
fi

# Check for Make
if command_exists_and_works make; then
    echo "Make found and working"
    MAKE_AVAILABLE=true
else
    echo "Make not found or not working"
    case $DISTRO in
        ubuntu|debian)
            echo "To install Make, run: sudo apt-get install make"
            ;;
        fedora|rhel|centos)
            echo "To install Make, run: sudo dnf install make"
            ;;
        *)
            echo "Please install Make using your distribution's package manager"
            ;;
    esac
    MAKE_AVAILABLE=false
fi

# Check for Docker
if command_exists_and_works docker; then
    echo "Docker found and working"
    DOCKER_AVAILABLE=true
else
    echo "Docker not found or not working"
    echo "MS-DOS and Windows builds will be disabled."
    echo "If you want to enable these builds, please install Docker and ensure the daemon is running."
    case $DISTRO in
        ubuntu|debian)
            echo "To install Docker, follow the guide at: https://docs.docker.com/engine/install/ubuntu/"
            ;;
        fedora|rhel|centos)
            echo "To install Docker, follow the guide at: https://docs.docker.com/engine/install/fedora/"
            ;;
        *)
            echo "Please install Docker following the instructions for your distribution"
            ;;
    esac
    DOCKER_AVAILABLE=false
fi

# Check for QMake
if command_exists_and_works qmake; then
    echo "QMake found and working"
    QMAKE_AVAILABLE=true
else
    echo "QMake not found or not working. Qt build will be disabled."
    echo "If you want to enable Qt build, please install Qt5 development packages."
    case $DISTRO in
        ubuntu|debian)
            echo "To install Qt5, run: sudo apt-get install qt5-default"
            ;;
        fedora|rhel|centos)
            echo "To install Qt5, run: sudo dnf install qt5-devel"
            ;;
        *)
            echo "Please install Qt5 development packages using your distribution's package manager"
            ;;
    esac
    QMAKE_AVAILABLE=false
fi

# Check for MinGW (for qt-windows target)
if command_exists_and_works x86_64-w64-mingw32-gcc && command_exists_and_works mingw64-qmake-qt5; then
    echo "MinGW toolchain for Windows found and working"
    MINGW_AVAILABLE=true
else
    echo "MinGW toolchain for Windows not found or not working. Qt Windows build will be disabled."
    echo "If you want to enable Qt Windows build, please install MinGW toolchain and Qt5 for MinGW."
    case $DISTRO in
        ubuntu|debian)
            echo "To install MinGW and Qt5 for MinGW, run: sudo apt-get install mingw-w64 qt5-mingw-w64-dev"
            ;;
        fedora|rhel|centos)
            echo "To install MinGW and Qt5 for MinGW, run: sudo dnf install mingw64-gcc-c++ mingw64-qt5-qtbase-devel"
            ;;
        *)
            echo "Please install MinGW toolchain and Qt5 for MinGW using your distribution's package manager"
            ;;
    esac
    MINGW_AVAILABLE=false
fi

# Generate Makefile.config
echo "Generating Makefile.config..."
cat > Makefile.config << EOF
# Generated by configure script

# Compiler
CC = gcc

# Compiler flags
CFLAGS = -Wall -Wextra

# Target
TARGET = wizardscastle

# Docker availability
DOCKER_AVAILABLE = $DOCKER_AVAILABLE

# QMake availability
QMAKE_AVAILABLE = $QMAKE_AVAILABLE

# MinGW availability
MINGW_AVAILABLE = $MINGW_AVAILABLE

EOF

echo "Configuration complete. You can now run 'make' to build the project."
echo "To see available targets, run 'make help'."

# Generate updated Makefile
echo "Updating Makefile..."
cat > Makefile << EOF
# Makefile for Wizard's Castle
include Makefile.config

VERSION=1.0

# Source files
SRCS = main.c wizardio.c wizards-castle.c player.c gamestate.c combat.c utilities.c vendor.c

# Output executable
DOS_TARGET = wizard.exe
WINDOWS_TARGET = wizard_windows.exe

# Debug flags
DEBUGFLAGS = -g -fsanitize=address

# Docker image for DJGPP
DJGPP_IMAGE = djfdyuruiry/djgpp

# Docker image for Windows
MINGW_IMAGE = mdashnet/mingw  # MinGW for Windows

# Compiler for Windows (MinGW)
MINGW_CC = x86_64-w64-mingw32-gcc

QT_WINDOWS_IMAGE = fedora:38

# Correct CSDPMI URL
CSDPMI_URL = http://na.mirror.garr.it/mirrors/djgpp/current/v2misc/csdpmi7b.zip

# Get current user and group IDs
USER_ID = \$(shell id -u)
GROUP_ID = \$(shell id -g)

# Default target
all: \$(TARGET)

# Rule to build the executable without debug symbols
\$(TARGET): \$(SRCS)
	\$(CC) \$(CFLAGS) \$(SRCS) -o \$(TARGET)

# Debug target to build with debug symbols
debug: CFLAGS += \$(DEBUGFLAGS)
debug: \$(TARGET)

# Clean target to remove generated files
clean:
	rm -f \$(TARGET) \$(DOS_TARGET) csdpmi7b.zip || true
	rm -rf csdpmi  || true
	rm *.exe || true
	rm *.EXE || true
	rm *.zip || true
	rm *.zip.*  || true
	rm *.tar.gz || true
	[ -f \$(QT_MAKEFILE) ] && \$(MAKE) -f \$(QT_MAKEFILE) clean || true

# Conditional targets based on Docker availability
ifeq (\$(DOCKER_AVAILABLE),true)
pull-djgpp:
	docker pull \$(DJGPP_IMAGE)

pull-mingw:
	docker pull \$(MINGW_IMAGE)

get-csdpmi:
	wget \$(CSDPMI_URL)
	unzip -o csdpmi7b.zip -d csdpmi

msdos: pull-djgpp get-csdpmi
	docker run --rm -v \$(PWD):/src:z -u \$(USER_ID):\$(GROUP_ID) \$(DJGPP_IMAGE) /bin/sh -c "cd /src && gcc \$(SRCS) -o \$(DOS_TARGET)"
	cp csdpmi/bin/CWSDPMI.EXE .

windows: pull-mingw
	docker run --rm -v \$(PWD):/src:z -u \$(USER_ID):\$(GROUP_ID) \$(MINGW_IMAGE) /bin/sh -c "cd /src && \$(MINGW_CC) \$(SRCS) -o \$(WINDOWS_TARGET)"

run-msdos: msdos
	dosbox \$(DOS_TARGET)
endif

# Qt-specific variables and targets
ifeq (\$(QMAKE_AVAILABLE),true)
QMAKE = qmake
MINGW_QMAKE = mingw64-qmake-qt5 
QT_MAKEFILE = Makefile.qt
MINGW_QT_MAKEFILE = Makefile.qtwin64
QT_PRO = wizard_castle_qt5.pro

qt: \$(QT_MAKEFILE)
	\$(MAKE) -f \$(QT_MAKEFILE) clean
	\$(MAKE) -f \$(QT_MAKEFILE)

\$(QT_MAKEFILE): \$(QT_PRO)
	\$(QMAKE) -o \$(QT_MAKEFILE) \$(QT_PRO)

ifeq (\$(MINGW_AVAILABLE),true)
qt-windows: 
	\$(MINGW_QMAKE) CONFIG+=static CONFIG+=release -o \$(MINGW_QT_MAKEFILE)
	make -f \$(MINGW_QT_MAKEFILE) clean
	make -f \$(MINGW_QT_MAKEFILE)
	cp /usr/x86_64-w64-mingw32/sys-root/mingw/bin/*.dll release
endif

clean-qt:
	[ -f \$(QT_MAKEFILE) ] && \$(MAKE) -f \$(QT_MAKEFILE) clean || true
	rm -f \$(QT_MAKEFILE)
endif

help:
	@echo "Available targets:"
	@echo "  all        : Build the main executable"
	@echo "  debug      : Build with debug symbols"
	@echo "  clean      : Remove generated files"
ifeq (\$(DOCKER_AVAILABLE),true)
	@echo "  msdos      : Build for MS-DOS (requires Docker)"
	@echo "  windows    : Build for Windows (requires Docker)"
	@echo "  run-msdos  : Run the MS-DOS version in DOSBox (requires Docker)"
endif
ifeq (\$(QMAKE_AVAILABLE),true)
	@echo "  qt         : Build Qt version"
	@echo "  clean-qt   : Clean Qt-specific files"
ifeq (\$(MINGW_AVAILABLE),true)
	@echo "  qt-windows : Build Qt version for Windows"
endif
endif

.PHONY: all debug clean pull-djgpp get-csdpmi msdos run-msdos qt clean-qt windows pull-mingw help
EOF

echo "Makefile updated with conditional targets based on available dependencies."
