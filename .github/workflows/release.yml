name: Build and Release

on:
  push:
    branches:
      - main  # or your default branch name

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1
    
    - name: Install dependencies
      run: |
        sudo dnf install -y rpm zip gcc make rpm-build mingw64-gcc wget

    - name: Build RPM
      run: |
        pushd c
        # Create the source tarball
        mkdir -p wizardscastle-1.0
        cp *.c wizardscastle-1.0/
        cp *.h wizardscastle-1.0/
        cp Makefile wizardscastle-1.0/
        tar -czf wizardscastle-1.0.tar.gz wizardscastle-1.0
        rm -rf wizardscastle-1.0
        # Move the source tarball to the SOURCES directory for rpmbuild
        mkdir -p ~/rpmbuild/SOURCES
        cp wizardscastle-1.0.tar.gz ~/rpmbuild/SOURCES/
        # Build the RPM using the existing spec file
        rpmbuild -ba -D 'debug_package %{nil}' wizardscastle.spec
        popd

    - name: Build Windows version
      run: |
        pushd c
        x86_64-w64-mingw32-gcc *.c -o wizard_windows.exe
        echo "Checking if executable was created:"
        ls -l wizard_windows.exe
        popd

    - name: Build MS-DOS version
      run: |
        wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.3/djgpp-linux64-gcc1210.tar.bz2
        tar -xf djgpp-linux64-gcc1210.tar.bz2 -C /usr/local/
        export PATH=$PATH:/usr/local/djgpp/bin
        pushd c
        /usr/local/djgpp/bin/i586-pc-msdosdjgpp-gcc *.c -o wizard.exe
        wget http://na.mirror.garr.it/mirrors/djgpp/current/v2misc/csdpmi7b.zip
        unzip -u csdpmi7b.zip
        find * -type f
        cp bin/CWSDPMI.EXE cwsdpmi.exe
        popd 

    - name: Build Linux version and create package
      run: |
        pushd c
        make
        mkdir -p wizardscastle-linux
        cp wizardscastle wizardscastle-linux/
        tar -czf wizardscastle-linux.tar.gz wizardscastle-linux
        rm -rf wizardscastle-linux
        popd

    - name: Create DOS zip package
      run: |
        mkdir -p dos_package
        cp c/wizard.exe dos_package/
        cp c/cwsdpmi*.EXE dos_package/
        pushd dos_package
        zip -r ../wizard.zip .
        popd

    - name: Generate release date
      id: date
      run: echo "::set-output name=date::v$(date +'%Y%m%d')"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.date.outputs.date }}
        release_name: Release ${{ steps.date.outputs.date }}
        draft: false
        prerelease: false
    
    - name: Upload RPM Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ~/rpmbuild/RPMS/x86_64/wizardscastle-1.0-1.x86_64.rpm
        asset_name: wizardscastle-${{ steps.date.outputs.date }}.rpm
        asset_content_type: application/x-rpm
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./c/wizard_windows.exe
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload DOS Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wizard.zip
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-dos.zip
        asset_content_type: application/zip
    
    - name: Upload Linux Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./c/wizardscastle-linux.tar.gz
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-linux.tar.gz
        asset_content_type: application/gzip
