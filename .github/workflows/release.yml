name: Build and Release

on:
  push:
    branches:
      - main  # or your default branch name
  schedule:
    - cron: '0 0 1 */1 *'  # Runs at 00:00 on the 1st of every month

env:
  BUILD_CONFIGURATION: Release
  QT_VERSION: '5.15.2'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      date: ${{ steps.date.outputs.date }}

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1
    
    - name: Install dependencies
      run: |
        sudo dnf install -y rpm zip gcc make rpm-build mingw64-gcc wget qt6-qtbase-devel

    - name: Build RPM
      run: |
        pushd c
        mkdir -p wizardscastle-1.0
        cp *.c   wizardscastle-1.0/
        cp *.h   wizardscastle-1.0/
        cp *.pro wizardscastle-1.0/
        cp *.cpp wizardscastle-1.0/
        cp Makefile wizardscastle-1.0/
        tar -czf wizardscastle-1.0.tar.gz wizardscastle-1.0
        rm -rf wizardscastle-1.0
        mkdir -p ~/rpmbuild/SOURCES
        cp wizardscastle-1.0.tar.gz ~/rpmbuild/SOURCES/
        rpmbuild -ba -D 'debug_package %{nil}' wizardscastle.spec
        popd

    - name: Build Windows version
      run: |
        pushd c
        x86_64-w64-mingw32-gcc *.c -o wizard_windows.exe
        echo "Checking if executable was created:"
        ls -l wizard_windows.exe
        ls -l *.exe
        popd

    - name: Build MS-DOS version
      run: |
        wget https://github.com/andrewwutw/build-djgpp/releases/download/v3.3/djgpp-linux64-gcc1210.tar.bz2
        tar -xf djgpp-linux64-gcc1210.tar.bz2 -C /usr/local/
        export PATH=$PATH:/usr/local/djgpp/bin
        pushd c
        /usr/local/djgpp/bin/i586-pc-msdosdjgpp-gcc *.c -o wizard.exe
        wget http://na.mirror.garr.it/mirrors/djgpp/current/v2misc/csdpmi7b.zip
        unzip -u csdpmi7b.zip
        find * -type f
        cp bin/CWSDPMI.EXE cwsdpmi.exe
        popd 

    - name: Build Linux version and create package
      run: |
        pushd c
        make
        mkdir -p wizardscastle-linux
        cp wizardscastle      wizardscastle-linux/
        tar -czf wizardscastle-linux.tar.gz wizardscastle-linux
        rm -rf wizardscastle-linux
        popd

    - name: Create DOS zip package
      run: |
        mkdir -p dos_package
        cp c/wizard.exe dos_package/
        cp c/cwsdpmi.exe dos_package/
        pushd dos_package
        zip -r ../wizard.zip .
        popd

    - name: Find RPM Package
      id: find_rpm
      run: |
        RPM_PATH=$(find ~/rpmbuild/RPMS/x86_64/ -name "wizardscastle-*.rpm" | head -n 1)
        if [ -z "$RPM_PATH" ]; then
          echo "Error: RPM file not found"
          exit 1
        fi
        RPM_FILENAME=$(basename "$RPM_PATH")
        echo "rpm_path=$RPM_PATH" >> $GITHUB_OUTPUT
        echo "rpm_filename=$RPM_FILENAME" >> $GITHUB_OUTPUT
    
    - name: Generate release date and unique identifier
      id: date
      run: |
        echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        echo "unique_id=$(date +'%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.date.outputs.date }}-${{ steps.date.outputs.unique_id }}
        release_name: Release ${{ steps.date.outputs.date }}-${{ steps.date.outputs.unique_id }}
        draft: false
        prerelease: false

    - name: Upload RPM Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_rpm.outputs.rpm_path }}
        asset_name: ${{ steps.find_rpm.outputs.rpm_filename }}
        asset_content_type: application/x-rpm
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./c/wizard_windows.exe
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-windows.exe
        asset_content_type: application/octet-stream
    
    - name: Upload DOS Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./wizard.zip
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-dos.zip
        asset_content_type: application/zip
    
    - name: Upload Linux Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./c/wizardscastle-linux.tar.gz
        asset_name: wizardscastle-${{ steps.date.outputs.date }}-linux.tar.gz
        asset_content_type: application/gzip

  build-qt-windows:
    runs-on: windows-latest
    needs: build-and-release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
        dir: ${{ runner.temp }}
        cache: true
        setup-python: false

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        toolset: 14.29
        spectre: false

    - name: Build Qt application
      shell: cmd
      working-directory: c
      run: |
        echo Current directory: %CD%
        set CL=/MD /O1 /W1 /wd4996 /wd4244 /wd5105 /Zc:preprocessor- /GS- /D_CRT_SECURE_NO_WARNINGS /diagnostics:column /errorReport:send
        qmake wizard_castle_qt5.pro
        nmake

    - name: Package Qt artifacts
      shell: cmd
      run: |
        mkdir win_package
        if exist c\release\wizardscastle-qt.exe (
          copy c\release\wizardscastle-qt.exe win_package\
          windeployqt --release --no-translations --no-system-d3d-compiler win_package\wizardscastle-qt.exe
        ) else if exist c\wizardscastle-qt.exe (
          copy c\wizardscastle-qt.exe win_package\
          windeployqt --release --no-translations --no-system-d3d-compiler win_package\wizardscastle-qt.exe
        ) else (
          echo No exe found
          exit 1
        )
        powershell Compress-Archive -Path win_package\* -DestinationPath wizards_castle_qt_windows.zip

    - name: Upload Qt Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-and-release.outputs.upload_url }}
        asset_path: ./wizards_castle_qt_windows.zip
        asset_name: wizardscastle-${{ needs.build-and-release.outputs.date }}-qt-windows.zip
        asset_content_type: application/zip

  # I don't actually have a MAC to test this 
  build-qt-macos:
    runs-on: macos-latest
    needs: build-and-release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create and activate virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools virtualenv
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Install build dependencies
      run: |
        # Clean up any existing installations
        brew uninstall --ignore-dependencies cmake || true
        brew uninstall --ignore-dependencies pkg-config || true
        
        # Install build tools
        brew install cmake
        brew install pkg-config
        brew install create-dmg
        
        # Remove any existing PyQt installations
        pip uninstall -y PyQt5 PyQt5-sip PyQt5-Qt5 || true
        
        # Install Python dependencies in correct order
        pip install sip
        pip install PyQt5-sip
        pip install PyQt5==5.15.9
        
        # Verify installations without version check
        echo "Testing PyQt5 import..."
        python -c "import PyQt5.QtCore; print('PyQt5 import successful')"
        
        echo "Testing Qt installation..."
        qmake --version || true

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: 'mac'
        target: 'desktop'
        arch: 'clang_64'
        tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
        dir: ${{ runner.temp }}
        cache: true
        setup-python: false

    - name: Verify Qt installation
      run: |
        echo "Qt installation path: $Qt5_DIR"
        echo "QTDIR: $QTDIR"
        qmake --version
        which qmake

    - name: Build Qt application
      working-directory: c
      run: |
        source $VIRTUAL_ENV/bin/activate
        export PATH="$QTDIR/bin:$PATH"
        echo "Using qmake from: $(which qmake)"
        qmake -v
        qmake wizard_castle_qt5.pro
        make -j$(sysctl -n hw.ncpu)

    - name: Create app bundle
      run: |
        source $VIRTUAL_ENV/bin/activate
        mkdir -p WizardsCastle.app/Contents/{MacOS,Resources,Frameworks}
        cp c/wizardscastle-qt WizardsCastle.app/Contents/MacOS/
        
        # Create Info.plist
        cat > WizardsCastle.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>wizardscastle-qt</string>
            <key>CFBundleIconFile</key>
            <string>wizardscastle.icns</string>
            <key>CFBundleIdentifier</key>
            <string>com.wizardscastle.app</string>
            <key>CFBundleName</key>
            <string>Wizard's Castle</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        # Deploy Qt dependencies
        macdeployqt WizardsCastle.app -dmg -verbose=2

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build-and-release.outputs.upload_url }}
        asset_path: ./WizardsCastle.dmg
        asset_name: wizardscastle-${{ needs.build-and-release.outputs.date }}-qt-macos.dmg
        asset_content_type: application/x-apple-diskimage
